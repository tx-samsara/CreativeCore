plugins {
    id 'java'
    id "org.jetbrains.kotlin.jvm" version "2.0.0"
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'com.create'
version = '1.0-SNAPSHOT'

base {
    archivesName = "CreativeCore"
}

loom {
    splitEnvironmentSourceSets()
    mods {
        "CreativeCore" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

fabricApi {
    configureDataGeneration {
        client = true
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = 'https://repo.extendedclip.com/releases/'
    }
    maven {
        name = "cobblemonReleases"
        url = uri("https://artefacts.cobblemon.com/releases")
    }
    maven {
        url = 'https://maven.impactdev.net/repository/development/'
    }
}

dependencies {
    mappings loom.officialMojangMappings()
    minecraft "com.mojang:minecraft:1.21.1"
    compileOnly "org.spigotmc:spigot:1.21.1-R0.1-SNAPSHOT"
    implementation(fileTree(dir: 'libs', include: '**/*.jar'))
    modImplementation "net.fabricmc:fabric-loader:0.16.14"
    modImplementation "net.fabricmc.fabric-api:fabric-api:0.115.6+1.21.1"
    implementation 'com.google.code.gson:gson:2.8.9'
    modCompileOnly("com.cobblemon:fabric:1.6.1+1.21.1")
    implementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    compileOnly 'org.jetbrains.kotlin:kotlin-reflect'
    compileOnly 'me.clip:placeholderapi:2.11.6'
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}